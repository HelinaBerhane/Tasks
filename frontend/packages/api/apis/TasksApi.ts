/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteTaskRequest,
  GetTasksResponse,
  HTTPValidationError,
  ToggleTaskCompleteRequest,
  UpdateTaskRequest,
} from '../models/index';
import {
    DeleteTaskRequestFromJSON,
    DeleteTaskRequestToJSON,
    GetTasksResponseFromJSON,
    GetTasksResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ToggleTaskCompleteRequestFromJSON,
    ToggleTaskCompleteRequestToJSON,
    UpdateTaskRequestFromJSON,
    UpdateTaskRequestToJSON,
} from '../models/index';

export interface DeleteTaskOperationRequest {
    deleteTaskRequest: DeleteTaskRequest;
}

export interface ToggleTaskCompleteOperationRequest {
    toggleTaskCompleteRequest: ToggleTaskCompleteRequest;
}

export interface UpdateTaskOperationRequest {
    updateTaskRequest: UpdateTaskRequest;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Delete Task
     */
    async deleteTaskRaw(requestParameters: DeleteTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteTaskRequest === null || requestParameters.deleteTaskRequest === undefined) {
            throw new runtime.RequiredError('deleteTaskRequest','Required parameter requestParameters.deleteTaskRequest was null or undefined when calling deleteTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTaskRequestToJSON(requestParameters.deleteTaskRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Task
     */
    async deleteTask(requestParameters: DeleteTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskRaw(requestParameters, initOverrides);
    }

    /**
     * Get Tasks
     */
    async getTasksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasksResponseFromJSON(jsonValue));
    }

    /**
     * Get Tasks
     */
    async getTasks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasksResponse> {
        const response = await this.getTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Toggle Task Complete
     */
    async toggleTaskCompleteRaw(requestParameters: ToggleTaskCompleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.toggleTaskCompleteRequest === null || requestParameters.toggleTaskCompleteRequest === undefined) {
            throw new runtime.RequiredError('toggleTaskCompleteRequest','Required parameter requestParameters.toggleTaskCompleteRequest was null or undefined when calling toggleTaskComplete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/complete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToggleTaskCompleteRequestToJSON(requestParameters.toggleTaskCompleteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Toggle Task Complete
     */
    async toggleTaskComplete(requestParameters: ToggleTaskCompleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.toggleTaskCompleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update Task
     */
    async updateTaskRaw(requestParameters: UpdateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateTaskRequest === null || requestParameters.updateTaskRequest === undefined) {
            throw new runtime.RequiredError('updateTaskRequest','Required parameter requestParameters.updateTaskRequest was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskRequestToJSON(requestParameters.updateTaskRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Task
     */
    async updateTask(requestParameters: UpdateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTaskRaw(requestParameters, initOverrides);
    }

}
